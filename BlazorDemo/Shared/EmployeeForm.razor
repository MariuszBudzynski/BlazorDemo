@inject NavigationManager naviManager

@if (Employee is not null)
{
	<EditForm Model="@Employee" OnValidSubmit="@ValidSubmit"
			  OnInvalidSubmit="@InalidSubmit">
		<DataAnnotationsValidator />

		@*<ValidationSummary/> triggers the Summary up if needed*@
		<div class="mb-3">
			<label for="LastName" class="form-label">Last Name</label>
			<InputText id="LastName" class="form-control"
			@bind-Value="@Employee.LastName" />
			<ValidationMessage For="()=>Employee.LastName" />
		</div>
		<div class="mb-3">
			<label for="FirstName" class="form-label">First Name</label>
			<InputText id="FirstName" class="form-control"
			@bind-Value="@Employee.FirstName" />
			<ValidationMessage For="()=>Employee.FirstName" />
		</div>
		<div class="mb-3">
			<label for="Title" class="form-label">Title</label>
			<InputSelect id="Title" class="form-control"
			@bind-Value="@Employee.Title">
				@if (@Employee.Title == null)
				{
					<option value="">Select</option>
				}
				else
				{
					<option value=@Employee.Title>@Employee.Title</option>
				}
				@if (TitleList is not null)
				{
					foreach (var title in TitleList)
					{
						<option value="@title">@title</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="()=>Employee.Title" />
		</div>

		<div class="mb-3">
			<label for="TitleOfCourtesy" class="form-label">Title Of Courtesy</label>
			<InputSelect id="TitleOfCourtesy" class="form-select"
			@bind-Value="@Employee.TitleOfCourtesy">
			@if (@Employee.TitleOfCourtesy==null)
			{
					<option value="">Select</option>
			}
			else
			{
					<option value=@Employee.TitleOfCourtesy>@Employee.TitleOfCourtesy</option>
			}
				@if (TitleOfCourtesyList is not null)
				{
					foreach (var title in TitleOfCourtesyList)
					{
						<option value="@title">@title</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="()=>Employee.TitleOfCourtesy" />
		</div>
		<div class="mb-3">
			<label for="BirthDate" class="form-label">Birth Date</label>
			<InputDate id="BirthDate" class="form-control"
			@bind-Value="@Employee.BirthDate" />
			<ValidationMessage For="()=>Employee.BirthDate" />
		</div>
		<div class="mb-3">
			<label for="Address" class="form-label">Address</label>
			<InputText id="Address" class="form-control"
			@bind-Value="@Employee.Address" />
			<ValidationMessage For="()=>Employee.Address" />
		</div>
		<div class="mb-3">
			<label for="City" class="form-label">City</label>
			<InputText id="City" class="form-control"
			@bind-Value="@Employee.City" />
			<ValidationMessage For="()=>Employee.City" />
		</div>
		<div class="mb-3">
			<label for="Region" class="form-label">Region</label>
			<InputText id="Region" class="form-control"
			@bind-Value="@Employee.Region" />
			<ValidationMessage For="()=>Employee.Region" />
		</div>
		<div class="mb-3">
			<label for="PostalCode" class="form-label">Postal Code</label>
			<InputText id="PostalCode" class="form-control"
			@bind-Value="@Employee.PostalCode" />
			<ValidationMessage For="()=>Employee.PostalCode" />
		</div>
		<div class="mb-3">
			<label for="Country" class="form-label">Country</label>
			<InputText id="Country" class="form-control"
			@bind-Value="@Employee.Country" />
			<ValidationMessage For="()=>Employee.Country" />
		</div>
		<div class="mb-3">
			<label for="HomePhone" class="form-label">Home Phone</label>
			<InputText id="HomePhone" class="form-control"
			@bind-Value="@Employee.HomePhone" />
			<ValidationMessage For="()=>Employee.HomePhone" />
		</div>
		<div class="mb-3">
			<label for="Extension" class="form-label">Extension</label>
			<InputText id="Extension" class="form-control"
			@bind-Value="@Employee.Extension" />
			<ValidationMessage For="()=>Employee.Extension" />
		</div>
	@if (IsEdit)
	{
			<button type="submit" class="btn btn-primary" disabled="@IsBusy">Update</button>
			<button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@IsBusy">Cancel</button>

	}
	else
		{
			<button type="submit" class="btn btn-primary" disabled="@IsBusy">Add</button>
		}
	</EditForm>
}

@code {
	[Parameter]
	public EmployeeModel? Employee { get; set; }
	[Parameter]
	public bool IsBusy { get; set; }
	[Parameter]
	public bool IsEdit { get; set; }
	[Parameter]
	public List<string>? TitleList { get; set; }
	[Parameter]
	public List<string>? TitleOfCourtesyList { get; set; }
	[Parameter]
	public int? EmployeeId { get; set; }
	[Parameter]
	public EventCallback CancelButton { get; set; }


	//passing events from child so the parent can execute them
	[Parameter]
	public EventCallback<bool> OnSubmit { get; set; }

	private async Task ValidSubmit()
	{
		if (OnSubmit.HasDelegate)
		{
			await OnSubmit.InvokeAsync(true);
		}
	}
	private async Task InalidSubmit()
	{
		if (OnSubmit.HasDelegate)
		{
			await OnSubmit.InvokeAsync(false);
		}
	}

	private async Task Cancel()
	{
		if (CancelButton.HasDelegate)
		{
			await CancelButton.InvokeAsync();
		}
	}
}
